#!/bin/sh

NAME=${NAME-"astrasshd"}
TMP=${TMP-"$(mktemp -d)"}
trap "{ rm -rf -- '$TMP'; }" EXIT

mkdir -p "$TMP/usr/share/initramfs-tools/hooks/"
cat << \EOF >"$TMP/usr/share/initramfs-tools/hooks/${NAME}_hook"
#!/bin/sh
PREREQ=""

prereqs()
{
        echo "$PREREQ"
}

case $1 in
prereqs)
        prereqs
        exit 0
        ;;
esac

. /usr/share/initramfs-tools/hook-functions

found_host_key=no
for key_type in dsa ecdsa ed25519 rsa; do
    ssh_host_key=/etc/ssh/ssh_host_"$key_type"_key
    if [ -f "$ssh_host_key" ] && [ -f "$ssh_host_key".pub ] ; then
        copy_file "$ssh_host_key" "$ssh_host_key"
        copy_file "$ssh_host_key".pub /etc/ssh/ssh_host_"$key_type"_key.pub
        found_host_key=yes
    fi
done

if [ "$found_host_key" = no ]; then
    echo >&2 "Didn't find any SSH host key!"
    exit 1
fi

if [ -f "$AUTHORIZED_KEYS" ]; then
    copy_file "$AUTHORIZED_KEYS" "$AUTHORIZED_KEYS" /etc/ssh/root_authorized_keys
    chmod 600 "$DESTDIR"/etc/ssh/root_authorized_keys
else
    echo >&2 "No authorized_keys for root user found!"
    exit 1
fi

copy_exec /usr/sbin/sshd /sbin/sshd
copy_exec /usr/sbin/nologin /sbin/nologin

cat << \CREATEFILE >$DESTDIR/etc/ssh/sshd_config
PermitRootLogin                 prohibit-password
AuthorizedKeysFile              /etc/ssh/%u_authorized_keys
AuthenticationMethods           publickey
ChallengeResponseAuthentication no
UsePAM                          no
X11Forwarding                   no

AcceptEnv LANG LC_*
CREATEFILE

echo 'sshd:x:115:65534:Privilege-separated SSH:/run/sshd:/sbin/nologin' >>"$DESTDIR"/etc/passwd
echo 'nogroup:x:65534:' >>"$DESTDIR"/etc/group

mkdir -p -m 0755 "$DESTDIR"/var/log
touch "$DESTDIR"/var/log/lastlog

cat << \CREATEFILE >$DESTDIR/etc/motd
Welcome to the initramfs SSH environment
CREATEFILE

cat << \CREATEFILE >$DESTDIR/etc/profile
if [ -n "$SSH_TTY" ]; then
    export PS1='initramfs-ssh:${PWD}# '
fi

if [ -n "$TERM" ]; then
    export TERM=vt220
fi
CREATEFILE

exit 0
EOF
chmod +x "$TMP/usr/share/initramfs-tools/hooks/${NAME}_hook"

mkdir -p "$TMP/usr/share/initramfs-tools/scripts/local-bottom"
cat << \EOF >"$TMP/usr/share/initramfs-tools/scripts/local-bottom/${NAME}_script"
#!/bin/sh
PREREQ=""
prereqs()
{
     echo "$PREREQ"
}

case $1 in
prereqs)
     prereqs
     exit 0
     ;;
esac

. scripts/functions

chvt 1
run_scripts /scripts/panic

cat /proc/cmdline \
 | sed 's/ /\n/g' \
 | grep -q '^force_sshd$' && {
    LI="$(ip -f link -o addr list | awk '/^[0-9]*\:.*link\/ether/{gsub(":$","",$2);print $2}')"
    FI="$(echo "$LI" | head -n1)"
    cat << OUTPUT
----------------------------------
| Network needs to be configured |
----------------------------------
List interfaces: $(echo "$LI" | tr '\n' ' ')
Format: static:IF:IP:PREFIX:GATEWAY[:MACADDRESS]
        dhcp:IF[:MACADDRESS]
Examples: static:$FI:1.1.1.2:24:1.1.1.1:001122334455
          static:$FI:1.1.1.2:24:1.1.1.1
          dhcp:$FI
          dhcp:$FI:001122334455
OUTPUT
    while true; do
        read -r -p "Configure the network: " CN
        CF="$(echo "$CN" | awk -F':' '{print $1}')"
        IF="$(echo "$CN" | awk -F':' '{print $2}')"

        case "$CF" in
            dhcp)
                IF_FOUND=no
                for v0 in $LI; do
                    [ "$IF" = "$v0" ] && IF_FOUND=yes && break
                done
                [ "$IF_FOUND" = "no" ] && echo "IF not found" && continue

                MA="$(echo "$CN" | awk -F':' '{print $3}')"
                if [ -n "$MA" ]; then
                    test -z "${MA##*[!0-9A-Fa-f]*}" ||
                    test ${#MA} -ne 12 && echo "MACADDRESS not valid" && continue
                    ip link set dev "$IF" address "${MA:0:2}:${MA:2:2}:${MA:4:2}:${MA:6:2}:${MA:8:2}:${MA:10:2}"
                fi

                ipconfig -t 10 -c "$CF" -d "$IF"

                break;;
            static)
                IP="$(echo "$CN" | awk -F':' '{print $3}')"
                PR="$(echo "$CN" | awk -F':' '{print $4}')"
                GW="$(echo "$CN" | awk -F':' '{print $5}')"
                MA="$(echo "$CN" | awk -F':' '{print $6}')"

                if ! echo "$IP" | \
                    { IFS=. read a b c d e;
                        test -n "$a" && test -n "$b" &&
                        test -n "$c" && test -n "$d" &&
                        \
                        test -n "${a##*[!0-9]*}" && test -n "${b##*[!0-9]*}" &&
                        test -n "${c##*[!0-9]*}" && test -n "${d##*[!0-9]*}" &&
                        \
                        test "$a" -ge 0 && test "$a" -le 255 &&
                        test "$b" -ge 0 && test "$b" -le 255 &&
                        test "$c" -ge 0 && test "$c" -le 255 &&
                        test "$d" -ge 0 && test "$d" -le 255 &&
                        test -z "$e"
                    } || [ "${IP#"${IP%?}"}" = "." ]; then echo "IP not valid" && continue; fi

                if ! echo "$PR" | \
                    { read a;
                        test -n "${a##*[!0-9]*}" &&
                        test "$a" -ge 0 && test "$a" -le 32
                    }; then echo "PREFIX not valid" && continue; fi

                if ! echo "$GW" | \
                    { IFS=. read a b c d e;
                        test -n "$a" && test -n "$b" &&
                        test -n "$c" && test -n "$d" &&
                        \
                        test -n "${a##*[!0-9]*}" && test -n "${b##*[!0-9]*}" &&
                        test -n "${c##*[!0-9]*}" && test -n "${d##*[!0-9]*}" &&
                        \
                        test "$a" -ge 0 && test "$a" -le 255 &&
                        test "$b" -ge 0 && test "$b" -le 255 &&
                        test "$c" -ge 0 && test "$c" -le 255 &&
                        test "$d" -ge 0 && test "$d" -le 255 &&
                        test -z "$e"
                    } || [ "${GW#"${GW%?}"}" = "." ]; then echo "GW not valid" && continue; fi

                if [ -n "$MA" ]; then
                    test -z "${MA##*[!0-9A-Fa-f]*}" ||
                    test ${#MA} -ne 12 && echo "MACADDRESS not valid" && continue
                    ip link set dev "$IF" address "${MA:0:2}:${MA:2:2}:${MA:4:2}:${MA:6:2}:${MA:8:2}:${MA:10:2}"
                fi

                ip link set dev "$IF" up
                ip address add "$IP"/"$PR" dev "$IF"
                ip route add default via "$GW"

                break;;
            *)
                echo "Valid only static|dhcp"
                continue;;
        esac
    done

    echo "Starting SSH on $IP port 22 ..."
    mkdir -p -m 0755 /run/sshd
    /sbin/sshd -D -e
}
EOF
chmod +x "$TMP/usr/share/initramfs-tools/scripts/local-bottom/${NAME}_script"

mkdir -p "$TMP/DEBIAN"
cat << EOF >"$TMP/DEBIAN/control"
Package: $NAME
Version: 16.07.2021
Section: admin
Priority: optional
Architecture: all
Essential: no
Maintainer: stallion2303 <stallion2303@gmail.com>
Description: integrates the OpenSSH sshd into the initramfs
EOF

cat << EOF >"$TMP/DEBIAN/postinst"
#!/bin/sh

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

. /usr/share/debconf/confmodule

db_get astrasshd/authorized_keys
echo "export AUTHORIZED_KEYS=\$RET" >/usr/share/initramfs-tools/conf-hooks.d/$NAME

if findmnt /boot >/dev/null; then
    /usr/sbin/update-initramfs -u -k all
else
    echo -e "\${RED}/boot not mounted\${NC}"
fi
EOF
chmod +x "$TMP/DEBIAN/postinst"

cat << \EOF >"$TMP/DEBIAN/templates"
Template: astrasshd/authorized_keys
Type: string
Default: /root/.ssh/authorized_keys
Description: path to root authorized_keys
EOF

cat << \EOF >"$TMP/DEBIAN/config"
#!/bin/sh -e

. /usr/share/debconf/confmodule

db_input medium astrasshd/authorized_keys || true
db_go || true
EOF
chmod +x "$TMP/DEBIAN/config"

dpkg-deb --build "$TMP" "${NAME}.deb"
