#!/bin/sh

: ${NAME='astrasshd'}
: ${TMP="$(mktemp -d)"}
: ${KEY='/root/.ssh/authorized_keys'}

trap "{ rm -rf -- '$TMP'; }" EXIT

mkdir -p "$TMP/usr/share/initramfs-tools/hooks/"
cat << \EOF >"$TMP/usr/share/initramfs-tools/hooks/${NAME}_hook"
#!/bin/sh
PREREQ=""

prereqs()
{
        echo "$PREREQ"
}

case $1 in
prereqs)
        prereqs
        exit 0
        ;;
esac

. /usr/share/initramfs-tools/hook-functions

found_host_key=no
for key_type in dsa ecdsa ed25519 rsa; do
    ssh_host_key=/etc/ssh/ssh_host_"$key_type"_key
    if [ -f "$ssh_host_key" ] && [ -f "$ssh_host_key".pub ]; then
        copy_file "$ssh_host_key" "$ssh_host_key"
        copy_file "$ssh_host_key".pub /etc/ssh/ssh_host_"$key_type"_key.pub
        found_host_key=yes
    fi
done

[ "$found_host_key" = no ] \
 && echo "Didn't find any SSH host key!" >&2 \
 && exit 1

[ -z "$AUTHORIZED_KEYS" ] \
 && echo 'authorized_keys is not set, use debconf-set-selections' >&2 \
 && exit 2

if [ -f "$AUTHORIZED_KEYS" ]; then
    copy_file "$AUTHORIZED_KEYS" "$AUTHORIZED_KEYS" /etc/ssh/root_authorized_keys
    chmod 600 "$DESTDIR"/etc/ssh/root_authorized_keys
else
    printf 'authorized_keys `%s` not found!\n' "$AUTHORIZED_KEYS" >&2
    exit 3
fi

copy_exec /usr/sbin/sshd /sbin/sshd
copy_exec /usr/sbin/nologin /sbin/nologin
copy_exec /lib/x86_64-linux-gnu/libnss_dns.so.2

cat << \CREATEFILE >$DESTDIR/etc/ssh/sshd_config
PermitRootLogin                 prohibit-password
AuthorizedKeysFile              /etc/ssh/%u_authorized_keys
AuthenticationMethods           publickey
ChallengeResponseAuthentication no
UsePAM                          no
X11Forwarding                   no

AcceptEnv LANG LC_*
CREATEFILE

echo 'sshd:x:115:65534:Privilege-separated SSH:/run/sshd:/sbin/nologin' >>"$DESTDIR"/etc/passwd
echo 'nogroup:x:65534:' >>"$DESTDIR"/etc/group

mkdir -p -m 0755 "$DESTDIR"/var/log
touch "$DESTDIR"/var/log/lastlog

cat << \CREATEFILE >$DESTDIR/etc/motd
Welcome to the initramfs SSH environment
CREATEFILE

cat << \CREATEFILE >$DESTDIR/etc/profile
if [ -n "$SSH_TTY" ]; then
    export PS1='[\u@\H:\w]# '
fi

if [ -n "$TERM" ]; then
    export TERM=vt220
fi
CREATEFILE

exit 0
EOF
chmod +x "$TMP/usr/share/initramfs-tools/hooks/${NAME}_hook"

mkdir -p "$TMP/usr/share/initramfs-tools/scripts/local-bottom"
cat << \EOF >"$TMP/usr/share/initramfs-tools/scripts/local-bottom/${NAME}_script"
#!/bin/sh
PREREQ=""
prereqs()
{
     echo "$PREREQ"
}

case $1 in
prereqs)
     prereqs
     exit 0
     ;;
esac

validate_ip()
{
    if echo "$1" | \
        { IFS=. read a b c d e;
            [ -n "$a" ] && [ -n "$b" ] &&
            [ -n "$c" ] && [ -n "$d" ] &&
            \
            [ -n "${a##*[!0-9]*}" ] && [ -n "${b##*[!0-9]*}" ] &&
            [ -n "${c##*[!0-9]*}" ] && [ -n "${d##*[!0-9]*}" ] &&
            \
            [ "$a" -ge 0 ] && [ "$a" -le 255 ] &&
            [ "$b" -ge 0 ] && [ "$b" -le 255 ] &&
            [ "$c" -ge 0 ] && [ "$c" -le 255 ] &&
            [ "$d" -ge 0 ] && [ "$d" -le 255 ] &&
            [ -z "$e" ]
        } && [ "${1#"${1%?}"}" != "." ]; then
        return 0
    else
        return 1
    fi
}

. scripts/functions

sed 's/ /\n/g' /proc/cmdline \
 | grep -qE '^force_sshd(=.+)?$' || exit 0

chvt 1
run_scripts /scripts/panic

LI="$(ip -f link -o addr list | awk '/^[0-9]*\:.*link\/ether/{gsub(":$","",$2);print $2}')"
FI="$(echo "$LI" | head -n1)"
cat << OUTPUT
----------------------------------
| Network needs to be configured |
----------------------------------
Format: static:IF:IP:PREFIX:GATEWAY[:MACADDRESS]
        dhcp:IF[:MACADDRESS]
Examples: static:$FI:1.1.1.2:24:1.1.1.1:001122334455
          static:$FI:1.1.1.2:24:1.1.1.1
          dhcp:$FI
          dhcp:$FI:001122334455
OUTPUT

while :; do
    read -r -p "Configure the network[$(echo "$LI" | tr '\n' '/' | sed 's/.$//')]: " CN
    CF="$(echo "$CN" | awk -F':' '{print $1}')"
    IF="$(echo "$CN" | awk -F':' '{print $2}')"

    [ -z "$IF" ] && printf 'IF is empty\n' && continue

    IF_FOUND=no
    for v0 in $LI; do
        [ "$IF" = "$v0" ] && IF_FOUND=yes && break
    done
    [ "$IF_FOUND" = "no" ] && printf 'IF `%s` not found\n' "$IF" && continue

    case "$CF" in
        dhcp)
            MA="$(echo "$CN" | awk -F':' '{print $3}')"
            if [ -n "$MA" ]; then
                [ -z "${MA##*[!0-9A-Fa-f]*}" ] ||
                [ ${#MA} -ne 12 ] && printf 'MACADDRESS %s not valid\n' "$MA" && continue
                ip link set dev "$IF" address "${MA:0:2}:${MA:2:2}:${MA:4:2}:${MA:6:2}:${MA:8:2}:${MA:10:2}"
            fi

            ipconfig -t 30 -c "$CF" -d "$IF"
            IP="$(ipconfig -n "$IF" | sed -En 's/^.*address\s*:\s*([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*$/\1/p')"

            echo "Setting up the resolv.conf from dhcp"
            ipconfig -n "$IF" \
             | sed -En 's/\s*dns[0-9]+\s*:\s*([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)/\nnameserver \1\n/gp;\
                        s/\s*domain\s*:\s*(.+)$/\nsearch \1/p' \
             | grep -E '^(nameserver|search)' >/etc/resolv.conf

            break
            ;;
        static)
            IP="$(echo "$CN" | awk -F':' '{print $3}')"
            PR="$(echo "$CN" | awk -F':' '{print $4}')"
            GW="$(echo "$CN" | awk -F':' '{print $5}')"
            MA="$(echo "$CN" | awk -F':' '{print $6}')"

            validate_ip "$IP" || { printf 'IP `%s` empty or invalid\n' "$IP"; continue; }

            if ! echo "$PR" | \
                { read a;
                    [ -n "${a##*[!0-9]*}" ] &&
                    [ "$a" -ge 0 ] && [ "$a" -le 32 ]
                }; then printf 'PREFIX `%s` empty or invalid\n' "$PR" && continue; fi

            validate_ip "$GW" || { printf 'GW `%s` empty or invalid\n' "$GW"; continue; }

            if [ -n "$MA" ]; then
                [ -z "${MA##*[!0-9A-Fa-f]*}" ] ||
                [ ${#MA} -ne 12 ] && printf 'MACADDRESS `%s` invalid\n' "$MA" && continue
                ip link set dev "$IF" address "${MA:0:2}:${MA:2:2}:${MA:4:2}:${MA:6:2}:${MA:8:2}:${MA:10:2}"
            fi

            ip link set dev "$IF" up
            ip address add "$IP"/"$PR" dev "$IF"
            ip route add default via "$GW"

            cat << OUTPUT
------------------------
| Setup DNS resolution |
------------------------
Format: DNS1[:DNS2[:SEARCH]]
If DNS1 is skip then DNS is not setup, later you can do it in the file /etc/resolv.conf
Examples: 1.1.1.1:2.2.2.2:company
          skip
OUTPUT

            while :; do
                read -r -p "Setup DNS: " DNS

                [ "$DNS" = 'skip' ] && break

                DNS1="$(echo "$DNS" | awk -F':' '{print $1}')"
                DNS2="$(echo "$DNS" | awk -F':' '{print $2}')"
                SEARCH="$(echo "$DNS" | awk -F':' '{print $3}')"

                validate_ip "$DNS1" || { printf 'DNS1 `%s` empty or invalid\n' "$DNS1"; continue; }
                printf "nameserver %s\n" "$DNS1" >/etc/resolv.conf

                if [ -n "$DNS2" ]; then
                    validate_ip "$DNS2" || { printf 'DNS2 `%s` invalid\n' "$DNS2"; continue; }
                    printf "nameserver %s\n" "$DNS2" >>/etc/resolv.conf
                fi

                if [ -n "$SEARCH" ]; then
                    [ -z "${SEARCH##*[!0-9a-zA-Z_. -]*}" ] && { printf 'SEARCH `%s` invalid\n' "$SEARCH"; continue; }
                    printf "search %s\n" "$SEARCH" >>/etc/resolv.conf
                fi

                break
            done

            break
            ;;
        *)
            echo 'Valid only static or dhcp'
            continue
            ;;
    esac
done

[ "$(hostname)" = '(none)' ] \
 && printf 'Setting the hostname to %s\n' "$IP" \
 && hostname "$IP"

printf 'Starting SSH on %s port 22 ...\n' "$IP"
mkdir -p -m 0755 /run/sshd
/sbin/sshd -4 -D -e
EOF
chmod +x "$TMP/usr/share/initramfs-tools/scripts/local-bottom/${NAME}_script"

mkdir -p "$TMP/usr/share/initramfs-tools/conf-hooks.d"
cat << EOF >"$TMP/usr/share/initramfs-tools/conf-hooks.d/${NAME}"
# default conf
export AUTHORIZED_KEYS="$KEY"
EOF

mkdir -p "$TMP/DEBIAN"
cat << EOF >"$TMP/DEBIAN/control"
Package: $NAME
Version: $(date '+%d.%m.%Y')
Section: admin
Priority: optional
Architecture: all
Essential: no
Maintainer: stallion2303 <stallion2303@gmail.com>
Description: integrates the OpenSSH sshd into the initramfs
EOF

cat << EOF >"$TMP/DEBIAN/postinst"
#!/bin/sh

CONF='/usr/share/initramfs-tools/conf-hooks.d/$NAME'

. /usr/share/debconf/confmodule

db_get astrasshd/authorized_keys
printf 'export AUTHORIZED_KEYS="%s"\n' "\$RET" >"\$CONF"

if findmnt /boot >/dev/null; then
    /usr/sbin/update-initramfs -u -k all
else
    printf '\033[0;31m/boot not mounted\033[0m\n'
    exit 1
fi
EOF
chmod +x "$TMP/DEBIAN/postinst"

cat << EOF >"$TMP/DEBIAN/postrm"
#!/bin/sh

if findmnt /boot >/dev/null; then
    /usr/sbin/update-initramfs -u -k all
else
    printf '\033[0;31m/boot not mounted\033[0m\n'
    exit 1
fi
EOF
chmod +x "$TMP/DEBIAN/postrm"

cat << EOF >"$TMP/DEBIAN/templates"
Template: astrasshd/authorized_keys
Type: string
Default: $KEY
Description: Path to root authorized_keys
EOF

cat << \EOF >"$TMP/DEBIAN/config"
#!/bin/sh -e

. /usr/share/debconf/confmodule

db_input medium astrasshd/authorized_keys || true
db_go || true
EOF
chmod +x "$TMP/DEBIAN/config"

dpkg-deb --build "$TMP" "${NAME}.deb"
